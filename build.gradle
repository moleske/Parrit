import java.time.LocalDateTime
import java.time.ZoneId
import java.time.ZoneOffset

group 'com.example'
version '0.0.1-SNAPSHOT'
description 'parrit'

buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
        nodePluginVersion = '1.1.1'
        kotlin_version = '1.1.2-4'
    }

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.grunt'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.postgresql:postgresql'

    compile('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: "commons-logging")
    }

    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.flywaydb:flyway-core'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

grunt {
    colors = true
    bufferOutput = true
}

test {
    filter {
        includeTestsMatching '*Test'
    }
}

task jsTest(type: NodeTask) {
    workingDir project.projectDir
    script = file('node_modules/karma/bin/karma')
    args = ['start', 'karma.conf.js']
}

test.dependsOn(jsTest)

task jsBuild(type: Copy, dependsOn: grunt_build) {
    from "$project.projectDir/src/main/resources/static/built"
    into "$project.projectDir/build/classes/main/static/built"
}

task jsClean(type: Delete) {
    delete 'src/main/resources/static/built/bundle.js'
    delete 'src/main/resources/static/built/bundle.css'
}

jar.dependsOn(jsBuild)

task createMigration() {
    doLast {
        def utc = ZoneId.of("UTC")
        def timestamp = LocalDateTime.now(utc).toEpochSecond(ZoneOffset.UTC)
        def path = "src/main/resources/db/migration/V${timestamp}__CHANGEME.sql"

        "touch ${project.projectDir}/${path}".execute()
    }
}

defaultTasks 'clean', 'jsClean', 'build', 'jsBuild'
